<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DSA on Kei's Blog</title><link>https://moonorange.github.io/categories/dsa/</link><description>Recent content in DSA on Kei's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://moonorange.github.io/categories/dsa/index.xml" rel="self" type="application/rss+xml"/><item><title>Heap</title><link>https://moonorange.github.io/posts/dsa/heap/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/heap/</guid><description>Heap Heap is a special Tree-based data structure in which tree is a complete binary tree. There are mainly two types of heaps.
Types of heap Min Heap
In min heap, all elements are smaller than their children. The root node will be the smallest element.
Max Heap
In max heap, all elements are bigger than their children. The root node will be the biggest element.
Reference Heap Data Structure Data Structures: Heaps</description></item><item><title>Tries</title><link>https://moonorange.github.io/posts/dsa/tries/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/tries/</guid><description>Tries It is commonly used to represent a dictionary for looking up words in a vocabulary
Implementation https://leetcode.com/problems/implement-trie-prefix-tree/
Trie() Initializes the trie object. void insert(String word) Inserts the string word into the trie. boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise. boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix, and false otherwise.</description></item><item><title>Tree</title><link>https://moonorange.github.io/posts/dsa/tree/</link><pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/tree/</guid><description>Tree Properties Every tree has a special node called the root node. The root node can be used to traverse every node of the tree. It is called root because the tree originated from root only. If a tree has N nodes(vertices), the number of edges is always one less than the number of nodes (i.e., N-1). If it has more than that, it&amp;rsquo;s called a graph not a tree.</description></item><item><title>Hash Set and Hash Table</title><link>https://moonorange.github.io/posts/dsa/hash/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/hash/</guid><description>The Principle of Built-in Hash Table The key value can be any hashable type. A value that belongs to a hashable type has a hash code, and this code is used to get the bucket index. Each bucket contains an array to store all the values in the same bucket initially If there are too many values in the bucket, these values will be stored in the form of height-balanced BST so that look-up can be more efficient.</description></item><item><title>Linked List</title><link>https://moonorange.github.io/posts/dsa/linked_list/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/linked_list/</guid><description>Introduction The linked list is a linear data structure.
There are two types of linked lists, the singly linked list and the doubly linked list.
Singly Linked list The linked list elements are not stored at a contiguous location; the elements are linked using pointers.
Advantages over arrays
Dynamic size Ease of insertion/deletion (Need to move all elements after targeted element in array) Implementation
class Node(object): def __init__(self, val): self.</description></item><item><title>Binary Tree</title><link>https://moonorange.github.io/posts/dsa/binary_tree/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/binary_tree/</guid><description>Overview A tree is a frequently-used data structure to simulate a hierarchical tree structure.
Each node of the tree will have a root value and a list of References to other nodes that are called child nodes. From graph view, a tree can also be defined as a directed acyclic graph that has N nodes and N-1 edges.
A Binary Tree is one of the most typical tree structures. As the name suggests, a binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child.</description></item><item><title>配列(Array)</title><link>https://moonorange.github.io/posts/dsa/array/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/array/</guid><description>実行時間 最悪実行時間(worst-case running time): 実行時間に対する保証の中で、最も強力なもの。 あるデータ構造の操作について最悪実行時間が f (n)</description></item></channel></rss>