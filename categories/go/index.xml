<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Kei's Blog</title><link>https://moonorange.github.io/categories/go/</link><description>Recent content in Go on Kei's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 11 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://moonorange.github.io/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementation of Job Queue model using goroutine and channel</title><link>https://moonorange.github.io/posts/programming_language/job_queues_go/</link><pubDate>Thu, 11 Apr 2024 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/programming_language/job_queues_go/</guid><description>Introduction In concurrent programming, managing tasks efficiently is crucial. One common pattern is the job queue model, where multiple tasks (jobs) are submitted to a queue and processed asynchronously by worker routines. In this blog post, we&amp;rsquo;ll explore how to implement a job queue model in Go using goroutines and channels.
Understanding the Job Queue Model At its core, the job queue model consists of two main components:
Job Queue: The job queue is a data structure that holds tasks awaiting execution.</description></item><item><title>Go Concurrency Model</title><link>https://moonorange.github.io/posts/programming_language/go_concurrency_model/</link><pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/programming_language/go_concurrency_model/</guid><description>Intro This article aims to summarize what I have learnt about Go&amp;rsquo;s concurrency model
Goroutines A goroutine is a lightweight independently executing function with its own call stack.
While not equivalent to a thread, conceptually, it can be thought of as a very cheap thread.
Here&amp;rsquo;s how you can use goroutines:
package main import ( &amp;#34;fmt&amp;#34; ) func somefunc() { fmt.Println(&amp;#34;called by goroutine&amp;#34;) } func main() { go somefunc() // Wait a while not to exit main goroutine before finishing another goroutine time.</description></item><item><title>Write a Large Amount of Data to CSV File with Go (Golang)</title><link>https://moonorange.github.io/posts/programming_language/golang_goroutines/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/programming_language/golang_goroutines/</guid><description>Introduction Have you ever found yourself in a situation where you needed to prepare a substantial amount of data for testing your code? If so, you&amp;rsquo;re not alone. Working with large datasets is a common requirement in software development, and Go provides some powerful tools to help you accomplish this efficiently.
In this blog post, I&amp;rsquo;ll share my approach to writing a large amount of data into a CSV file using Go, and I&amp;rsquo;ll demonstrate how to leverage Goroutines to make the process more efficient and faster.</description></item><item><title>Golang Basic(Golang基礎)</title><link>https://moonorange.github.io/posts/programming_language/golang/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/programming_language/golang/</guid><description>概要 Golang についての基礎的な情報をまとめる資料である。 Go とは？ Google が開発したプログラミング言語であり、2009 年に最初のバージョンがオープンソース</description></item></channel></rss>