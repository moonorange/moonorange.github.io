<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graph on Kei's Blog</title><link>https://moonorange.github.io/tags/graph/</link><description>Recent content in Graph on Kei's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://moonorange.github.io/tags/graph/index.xml" rel="self" type="application/rss+xml"/><item><title>Dijkstra’s Shortest Path Algorithm</title><link>https://moonorange.github.io/posts/dsa/dijkstra/</link><pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/dijkstra/</guid><description>What is Dijkstra’s Algorithm Dijkstra&amp;rsquo;s Algorithm is the algorithm to find the shortest path between any two vertices in a graph.
Dijkstra&amp;rsquo;s Algorithm will find the shortest path from a given starting vertex to every other vertices in a graph.
References Dijkstra Algorithm - Single Source Shortest Path - Greedy Method
Graph Data Structure 4. Dijkstra’s Shortest Path Algorithm</description></item><item><title>Topological Sort</title><link>https://moonorange.github.io/posts/dsa/topological_sort/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/topological_sort/</guid><description>What is Topological Sort? The topological sort is an ordering of nodes such that every node appears before all the nodes it points to.
The canonical application of the algorism is dependency resolution.
Coding problem using Topological Sort class Solution: def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -&amp;gt; List[int]: graph = defaultdict(list) for crs, prereq in prerequisites: graph[crs].append(prereq) visited, cycle = set(), set() def dfs(crs): # if there is a cycle, return False if crs in cycle: return False # if it&amp;#39;s already traversed if crs in visited: return True # add a node before traversing to check a cycle cycle.</description></item><item><title>Intro to Graphs</title><link>https://moonorange.github.io/posts/dsa/graph/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/graph/</guid><description>What is a Graph? A graph G is an ordered pair of a set V of vertices and a set of E of edges. G can be defines as follows $$G=\left(V,E\right)$$ ordered pair $$(a, b) \neq \left(b,a\right) \text{where} \ a \neq b$$ Graph terminology There are two type of graph, the one is directed graph and the other is undirected graph. Directed graphs contain ordered pairs of vertices while undirected</description></item></channel></rss>