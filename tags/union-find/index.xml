<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Union-Find on Kei's Blog</title><link>https://moonorange.github.io/tags/union-find/</link><description>Recent content in Union-Find on Kei's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 19 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://moonorange.github.io/tags/union-find/index.xml" rel="self" type="application/rss+xml"/><item><title>Union-Find</title><link>https://moonorange.github.io/posts/dsa/union_find/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/union_find/</guid><description>Union-Find Union-Find, aka Disjoint Set, is a rooted tree data structure that can efficiently classifies elements into categories. By utilizing this data structure, it becomes possible to rapidly determine whether two elements belong to the same group, as well as to swiftly merge two groups.
Implementation in Python class UnionFind: def __init__(self, n): # Initialize all parents as -1, which means all nodes are root nodes self.parent = [-1] * n # Rank holds a weight to determine which tree has more weight # The tree with a smaller rank should be placed under the tree with a greater rank to keep the height of the merged tree smaller self.</description></item></channel></rss>