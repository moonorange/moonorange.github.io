<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Kei's blog</title><link>https://moonorange.github.io/tags/python/</link><description>Recent content in Python on Kei's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://moonorange.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Tries</title><link>https://moonorange.github.io/posts/dsa/tries/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/tries/</guid><description>Tries It is commonly used to represent a dictionary for looking up words in a vocabulary
Implementation https://leetcode.com/problems/implement-trie-prefix-tree/
Trie() Initializes the trie object. void insert(String word) Inserts the string word into the trie. boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise. boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.</description></item><item><title>Hash Set and Hash Table</title><link>https://moonorange.github.io/posts/dsa/hash/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/hash/</guid><description>The Principle of Built-in Hash Table The key value can be any hashable type. A value that belongs to a hashable type has a hash code, and this code is used to get the bucket index. Each bucket contains an array to store all the values in the same bucket initially If there are too many values in the bucket, these values will be stored in the form of height-balanced BST so that look-up can be more efficient.</description></item><item><title>OOP Random Notes</title><link>https://moonorange.github.io/posts/software_design/oop/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/software_design/oop/</guid><description>Intro Random notes of relating OOP Terminology Parameter A parameter is a named variable passed into a function. Parameter variables are used to import arguments into functions. The difference between parameters and arguments Function parameters are the names listed in the function&amp;rsquo;s definition. Function arguments are the real values passed to the function. Parameters are initialized to the values of the arguments supplied. MDN Parameter Override Overriding a method means</description></item><item><title>Linked List</title><link>https://moonorange.github.io/posts/dsa/linked_list/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/linked_list/</guid><description>Introduction The linked list is a linear data structure.
There are two types of linked lists, the singly linked list and the doubly linked list.
Singly Linked list The linked list elements are not stored at a contiguous location; the elements are linked using pointers.
Advantages over arrays
Dynamic size Ease of insertion/deletion (Need to move all elements after targeted element in array) Implementation
class Node(object): def __init__(self, val): self.</description></item><item><title>Binary Tree</title><link>https://moonorange.github.io/posts/dsa/binary_tree/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/binary_tree/</guid><description>Overview A tree is a frequently-used data structure to simulate a hierarchical tree structure.
Each node of the tree will have a root value and a list of references to other nodes that are called child nodes. From graph view, a tree can also be defined as a directed acyclic graph that has N nodes and N-1 edges.
A Binary Tree is one of the most typical tree structures. As the name suggests, a binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child.</description></item><item><title>プロセス間通信(Inter process communication)</title><link>https://moonorange.github.io/posts/cs/ipc/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/cs/ipc/</guid><description>マルチプロセスについて 複数のプロセスが、ある共有メモリ領域を競合するアクセスをしている時、競合アクセスしているプログラム部分をクリティカルセ</description></item></channel></rss>