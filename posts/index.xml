<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Kei's Blog</title><link>https://moonorange.github.io/posts/</link><description>Recent content in Posts on Kei's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://moonorange.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>GCP random notes</title><link>https://moonorange.github.io/posts/public_cloud/gcp/</link><pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/public_cloud/gcp/</guid><description>Decision Tree Summarize decision trees to decide which gcp services you should use in a certain circumstance.
Compute option GCP offers a multiple compute services.
Here is a list of those services and how customizable/managed they are.
Decision Tree Firebase When you&amp;rsquo;re a mobile or html developer and want the least of amount of server-side code possible, you should choose Firebase.
Firebase provides Database, Storage, Functions/Services, and Hosting with a little code.</description></item><item><title>Intro to Graphs</title><link>https://moonorange.github.io/posts/dsa/graph/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/graph/</guid><description>What is a Graph? A graph G is an ordered pair of a set V of vertices and a set of E of edges. G can be defines as follows $$G=\left(V,E\right)$$ ordered pair $$(a, b) \neq \left(b,a\right) \text{where} \ a \neq b$$ Graph terminology There are two type of graph, the one is directed graph and the other is undirected graph. Directed graphs contain ordered pairs of vertices while undirected</description></item><item><title>Random Notes for system design</title><link>https://moonorange.github.io/posts/software_design/system_design/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/software_design/system_design/</guid><description>NoSQL database NoSQL databases are non tabular databases.
Features
Flexible schema Horizontal scaling Fast queries due to the data model Ease of use for developers Types The main types are document, key-value, wide-column, and graph.
Document databases Document databases store data in documents similar to JSON objects.
Particular elements can be indexed for faster querying.
They have the flexibility to rework their document structures as needed.
Use cases include e-commerce platforms, trading platforms, and mobile app development.</description></item><item><title>BFS and DFS</title><link>https://moonorange.github.io/posts/dsa/bfs_dfs/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/bfs_dfs/</guid><description>BFS Template A template in a python-ish pseudo-code for bfs from collections import deque def bfs(root, target): step = 0 # Enqueue root node in queue q = deque([root]) # Set to store visited nodes visited = set(q) while q: size = len(q) # Iterated the nodes which are already in the queue for _ in range(size): # Pop the first node in the queue curr = q.popleft if curr</description></item><item><title>Stack and Queue</title><link>https://moonorange.github.io/posts/dsa/queue_stacks/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/queue_stacks/</guid><description>Queue FIFO
package queue import &amp;#34;sync&amp;#34; type node struct { data interface{} next *node } type Queue struct { head *node tail *node count int lock *sync.Mutex } func NewQueue() *Queue { return &amp;amp;Queue{lock: &amp;amp;sync.Mutex{}} } func (q *Queue) Len() int { q.lock.Lock() defer q.lock.Unlock() return q.count } func (q *Queue) Push(data interface{}) { q.lock.Lock() defer q.lock.Unlock() ele := &amp;amp;node{data: data} if q.head == nil { q.head = ele q.tail = ele } else { q.</description></item><item><title>Heap</title><link>https://moonorange.github.io/posts/dsa/heap/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/heap/</guid><description>Heap Heap is a special Tree-based data structure in which tree is a complete binary tree. Heaps are basically are binary trees with more properties and specifications and there are mainly two types of heaps.
Rules
A heap must be a complete binary tree. All of the levels of the tree must be completely filled except maybe the last one. The last level has all keys as left as possible Types of heap Min Heap</description></item><item><title>Tries</title><link>https://moonorange.github.io/posts/dsa/tries/</link><pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/tries/</guid><description>Tries It is commonly used to represent a dictionary for looking up words in a vocabulary
Implementation https://leetcode.com/problems/implement-trie-prefix-tree/
Trie() Initializes the trie object. void insert(String word) Inserts the string word into the trie. boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise. boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix, and false otherwise.</description></item><item><title>Tree</title><link>https://moonorange.github.io/posts/dsa/tree/</link><pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/tree/</guid><description>Tree Properties Every tree has a special node called the root node. The root node can be used to traverse every node of the tree. It is called root because the tree originated from root only. If a tree has N nodes(vertices), the number of edges is always one less than the number of nodes (i.e., N-1). If it has more than that, it&amp;rsquo;s called a graph not a tree.</description></item><item><title>Terraformでのインフラ環境構築の手順書</title><link>https://moonorange.github.io/posts/public_cloud/terraform_provisioning/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/public_cloud/terraform_provisioning/</guid><description>インフラ構築の手順書 Terraformを使いWebサービスのデプロイ環境を構築していく際の手順を記述する。 Terraform CloudとGithub Acti</description></item><item><title>Golang Basic(Golang基礎)</title><link>https://moonorange.github.io/posts/programming_language/golang/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/programming_language/golang/</guid><description>概要 Golang についての基礎的な情報をまとめる資料である。 Go とは？ Google が開発したプログラミング言語であり、2009 年に最初のバージョンがオープンソース</description></item><item><title>Hash Set and Hash Table</title><link>https://moonorange.github.io/posts/dsa/hash/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/hash/</guid><description>The Principle of Built-in Hash Table The key value can be any hashable type. A value that belongs to a hashable type has a hash code, and this code is used to get the bucket index. Each bucket contains an array to store all the values in the same bucket initially If there are too many values in the bucket, these values will be stored in the form of height-balanced BST so that look-up can be more efficient.</description></item><item><title>Web脆弱性</title><link>https://moonorange.github.io/posts/security/web_security/</link><pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/security/web_security/</guid><description>CSRF(Cross Site Request Forgery) 外部サイトを経由したサーバーへの悪意のあるリクエストによって利用者の意図しない処理を実行する攻撃。 user がログインした状態で悪意あるリン</description></item><item><title>DB Random Notes(DB関連)</title><link>https://moonorange.github.io/posts/middleware/db/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/middleware/db/</guid><description>RAID 複数の Disk をまとめて一つの storage とする技術。 基本的にはデータを冗長化すること可用性を高めるためのものである。パフォーマンス向上のために用いられる</description></item><item><title>OOP Random Notes</title><link>https://moonorange.github.io/posts/software_design/oop/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/software_design/oop/</guid><description>Intro Random notes of relating OOP Terminology Parameter A parameter is a named variable passed into a function. Parameter variables are used to import arguments into functions. The difference between parameters and arguments Function parameters are the names listed in the function&amp;rsquo;s definition. Function arguments are the real values passed to the function. Parameters are initialized to the values of the arguments supplied. MDN Parameter Override Overriding a method means</description></item><item><title>Redis</title><link>https://moonorange.github.io/posts/middleware/redis/</link><pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/middleware/redis/</guid><description>Intro Redis は Remote Dictionary Server の略で高速でオープンソースなインメモリ key-value store である。 &amp;quot; データベース、キャッシュ、メッセージブローカー、キューとして利用される。 Usage example</description></item><item><title>OAuth2</title><link>https://moonorange.github.io/posts/security/oauth2/</link><pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/security/oauth2/</guid><description>はじめに OAuth2.0 とはサードパーティアプリケーションによる HTTP サービスへの限定的アクセスを可能にする認可フレームワークである。 The OAuth 2.0 authorization framework enables a third-party application to obtain limited</description></item><item><title>Linked List</title><link>https://moonorange.github.io/posts/dsa/linked_list/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/linked_list/</guid><description>Introduction The linked list is a linear data structure.
There are two types of linked lists, the singly linked list and the doubly linked list.
Singly Linked list The linked list elements are not stored at a contiguous location; the elements are linked using pointers.
Advantages over arrays
Dynamic size Ease of insertion/deletion (Need to move all elements after targeted element in array) Implementation
class Node(object): def __init__(self, val): self.</description></item><item><title>非同期処理(Asynchronous Programming)</title><link>https://moonorange.github.io/posts/frontend/asynchronous_programming/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/frontend/asynchronous_programming/</guid><description>概要 JavaScript を使う上で重要な概念である非同期処理について説明していく。 非同期処理とは 「ある関数が呼び出されたとき、戻り値として本来渡したい結果を返</description></item><item><title>ReactとReduxについて(About React and Redux)</title><link>https://moonorange.github.io/posts/frontend/react-redux/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/frontend/react-redux/</guid><description>概要 Summarizing what I learned about React and Redux React React, Javascript 周辺の用語 Babel 新しい仕様の JavaScript や JSX、TypeScript のコードを古いブラウザでも実行可能な JavaScript にコンパイルするコン</description></item><item><title>ネットワークについて(About network)</title><link>https://moonorange.github.io/posts/cs/network/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/cs/network/</guid><description>TCP/IP Transmission Control Protocol / Internet Protocol）は通信を実現する基盤技術 中でも「通信の信頼性を確保する」役割を担っているのが TCP IP とは Internet Protocol IP とは、複数の通信ネッ</description></item><item><title>プロセス間通信(Inter process communication)</title><link>https://moonorange.github.io/posts/cs/ipc/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/cs/ipc/</guid><description>マルチプロセスについて 複数のプロセスが、ある共有メモリ領域を競合するアクセスをしている時、競合アクセスしているプログラム部分をクリティカルセ</description></item><item><title>配列(Array)</title><link>https://moonorange.github.io/posts/dsa/array/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/array/</guid><description>実行時間 最悪実行時間(worst-case running time): 実行時間に対する保証の中で、最も強力なもの。 あるデータ構造の操作について最悪実行時間が f (n)</description></item><item><title>デザインパターン</title><link>https://moonorange.github.io/posts/software_design/design_patterns/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/software_design/design_patterns/</guid><description>デザインパターンとは 過去のソフトウェア設計者が発見し編み出した設計ノウハウを蓄積し、名前をつけ、再利用しやすいように特定の規約に従ってカタロ</description></item><item><title>デザインパターン２</title><link>https://moonorange.github.io/posts/software_design/design_patterns_2/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/software_design/design_patterns_2/</guid><description>8 Abstract Factory 抽象的な部品を組み合わせて抽象的な製品を作る 実装 抽象的な部品 Item link と tray のスーパークラス link と tray を同一視するためのクラス caption field はこの項目の見出</description></item><item><title>オペレーティングシステム(OS)</title><link>https://moonorange.github.io/posts/cs/os/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/cs/os/</guid><description>Operating System とコンピューターシステム プログラムとは 入力デバイス、ネットワークアダプタを介してコンピューターに何らかの処理を依頼する。 メモリ上に存在す</description></item><item><title>人間の目と畳み込みニューラルネットワーク(CNN)</title><link>https://moonorange.github.io/posts/ml/cnn/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/ml/cnn/</guid><description>CNN とは CNN（Convolutional Neural Networks: 畳み込みニューラルネットワーク）は､主に画像認識に利用されるネットワーク 構造的には､視神経系（視</description></item><item><title>awsでのインフラ構築について</title><link>https://moonorange.github.io/posts/public_cloud/infrastructure_setup_aws/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/public_cloud/infrastructure_setup_aws/</guid><description>chapter 1 サーバーというのは、「Linux」や「WindowsServer」など、サーバー用の OS をインストールしたコンピュータのこと VPC AmazonVirtualPrivateCloud の略。ユー</description></item><item><title>Binary Tree</title><link>https://moonorange.github.io/posts/dsa/binary_tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moonorange.github.io/posts/dsa/binary_tree/</guid><description>Overview A tree is a frequently-used data structure to simulate a hierarchical tree structure.
Each node of the tree will have a root value and a list of References to other nodes that are called child nodes. From graph view, a tree can also be defined as a directed acyclic graph that has N nodes and N-1 edges.
A Binary Tree is one of the most typical tree structures. As the name suggests, a binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child.</description></item></channel></rss>